"Games"
{
	"tf"
	{
		"Signatures"
		{
			"CBaseEntity::InSameTeam"
			{
				"linux" "@_ZNK11CBaseEntity10InSameTeamEPKS_"
			}
			"CWeaponMedigun::AllowedToHealTarget"
			{
				"linux" "@_ZN14CWeaponMedigun19AllowedToHealTargetEP11CBaseEntity"
			}
			"CObjectDispenser::CouldHealTarget"
			{
				"linux" "@_ZN16CObjectDispenser15CouldHealTargetEP11CBaseEntity"
			}
			"CObjectTeleporter::PlayerCanBeTeleported"
			{
				"linux" "@_ZN17CObjectTeleporter21PlayerCanBeTeleportedEP9CTFPlayer"
			}
			"CObjectSapper::IsValidRoboSapperTarget"
			{
				"linux" "@_ZN13CObjectSapper23IsValidRoboSapperTargetEP9CTFPlayer"
			}
			"CTFWrench::Smack"
			{
				"linux" "@_ZN9CTFWrench5SmackEv"
			}
			"JarExplode"
			{
				"linux" "@_Z10JarExplodeiP9CTFPlayerP11CBaseEntityS2_RK6Vectorif7ETFCondfPKcS8_"
			}
			"CTFProjectile_Arrow::StrikeTarget"
			{
				"linux" "@_ZN19CTFProjectile_Arrow12StrikeTargetEP13mstudiobbox_tP11CBaseEntity"
			}
			"CTFPlayer::TryToPickupBuilding"
			{
				"linux" "@_ZN9CTFPlayer19TryToPickupBuildingEv"
			}
			"CTFPlayer::AddObject"
			{
				"linux" "@_ZN9CTFPlayer9AddObjectEP11CBaseObject"
			}
			"CTFPlayer::RemoveObject"
			{
				"linux" "@_ZN9CTFPlayer12RemoveObjectEP11CBaseObject"
			}
			"CTFKnife::CanPerformBackstabAgainstTarget"
			{
				"linux" "@_ZN8CTFKnife31CanPerformBackstabAgainstTargetEP9CTFPlayer"
			}
			"CTFKnife::BackstabVMThink"
			{
				"linux" "@_ZN8CTFKnife15BackstabVMThinkEv"
			}
			"CObjectSapper::IsValidRoboSapperTarget"
			{
				"linux" "@_ZN13CObjectSapper23IsValidRoboSapperTargetEP9CTFPlayer"
			}
			"CTFTeamManager::Create"
			{
				"linux" "@_ZN14CTFTeamManager6CreateEPKc9color32_s"
			}
			"TFTeamMgr"
			{
				"linux" "@_Z9TFTeamMgrv"
			}
			"CTFGameRules::GetTeamAssignmentOverride"
			{
				"linux" "@_ZN12CTFGameRules25GetTeamAssignmentOverrideEP9CTFPlayerib"
			}
			"CTFGameRules::GetTeamAssignmentOverride"
			{
				"linux" "@_ZN12CTFGameRules25GetTeamAssignmentOverrideEP9CTFPlayerib"
			}
			"CTFTeam::AddObject"
			{
				"linux" "@_ZN7CTFTeam9AddObjectEP11CBaseObject"
			}
			"CTFTeam::RemoveObject"
			{
				"linux" "@_ZN7CTFTeam12RemoveObjectEP11CBaseObject"
			}
		}
		"Offsets"
		{
			"CTeamplayRules::PlayerRelationship"
			{
				"linux" "109"
			}
			"CTeamplayRules::FPlayerCanTakeDamage"
			{
				"linux" "64"
			}
			"CTeamplayRules::GetTeamID"
			{
				"linux" "108"
			}
			"CBaseObject::StartBuilding"
			{
				"linux" "337"
			}
			"CTeam::AddPlayer"
			{
				"linux" "203"
			}
			"CTeam::RemovePlayer"
			{
				"linux" "204"
			}
			"CBaseEntity::ShouldCollide"
			{
				"linux" "17"
			}
			"CBaseProjectile::CanCollideWithTeammates"
			{
				"linux" "224"
			}
			"CBaseProjectile::GetCollideWithTeammatesDelay"
			{
				"linux" "225"
			}
			"CTFWeaponBaseMelee::DoSwingTrace"
			{
				"linux" "469"
			}
			"CBaseCombatWeapon::PrimaryAttack"
			{
				"linux" "286"
			}
			"CTFProjectile_Jar::OnHit"
			{
				"linux" "260"
			}
			"CTFWeaponBase::DeflectPlayer"
			{
				"linux" "423"
			}
			"CTFWeaponBase::DeflectEntity"
			{
				"linux" "424"
			}
			"CBaseObject::Killed"
			{
				"linux" "350"
			}
			"CTFBaseRocket::Explode"
			{
				"linux" "237"
			}
			"CBaseEntity::ChangeTeam"
			{
				"linux" "95"
			}
		}
		"Functions"
		{
			"CTFBaseRocket::Explode"
			{
				"offset" "CTFBaseRocket::Explode"
				"callconv" "thiscall"
				"return" "void"
				"this" "entity"
				"hooktype" "entity"
				"arguments"
				{
					"trace"
					{
						"type" "objectptr"
					}
					"other"
					{
						"type" "cbaseentity"
					}
				}
			}
			"CBaseEntity::InSameTeam"
			{
				"signature" "CBaseEntity::InSameTeam"
				"callconv" "thiscall"
				"return" "bool"
				"this" "entity"
				"hooktype" "entity"
				"arguments"
				{
					"other"
					{
						"type" "cbaseentity"
					}
				}
			}
			"CObjectDispenser::CouldHealTarget"
			{
				"signature" "CObjectDispenser::CouldHealTarget"
				"callconv" "thiscall"
				"return" "bool"
				"this" "entity"
				"hooktype" "entity"
				"arguments"
				{
					"other"
					{
						"type" "cbaseentity"
					}
				}
			}
			"CWeaponMedigun::AllowedToHealTarget"
			{
				"signature" "CWeaponMedigun::AllowedToHealTarget"
				"callconv" "thiscall"
				"return" "bool"
				"this" "entity"
				"hooktype" "entity"
				"arguments"
				{
					"other"
					{
						"type" "cbaseentity"
					}
				}
			}
			"CObjectTeleporter::PlayerCanBeTeleported"
			{
				"signature" "CObjectTeleporter::PlayerCanBeTeleported"
				"callconv" "thiscall"
				"return" "bool"
				"this" "entity"
				"hooktype" "entity"
				"arguments"
				{
					"other"
					{
						"type" "cbaseentity"
					}
				}
			}
			"CObjectSapper::IsValidRoboSapperTarget"
			{
				"signature" "CObjectSapper::IsValidRoboSapperTarget"
				"callconv" "thiscall"
				"return" "bool"
				"this" "entity"
				"hooktype" "entity"
				"arguments"
				{
					"other"
					{
						"type" "cbaseentity"
					}
				}
			}
			"CTFPlayer::TryToPickupBuilding"
			{
				"signature" "CTFPlayer::TryToPickupBuilding"
				"callconv" "thiscall"
				"return" "void"
				"this" "entity"
				"hooktype" "entity"
			}
			"CTFWrench::Smack"
			{
				"signature" "CTFWrench::Smack"
				"callconv" "thiscall"
				"return" "void"
				"this" "entity"
				"hooktype" "entity"
			}
			"CTFProjectile_Arrow::StrikeTarget"
			{
				"signature" "CTFProjectile_Arrow::StrikeTarget"
				"callconv" "thiscall"
				"return" "bool"
				"this" "entity"
				"hooktype" "entity"
				"arguments"
				{
					"studio"
					{
						"type" "objectptr"
					}
					"other"
					{
						"type" "cbaseentity"
					}
				}
			}
			"CBaseObject::StartBuilding"
			{
				"offset" "CBaseObject::StartBuilding"
				"callconv" "thiscall"
				"return" "bool"
				"this" "entity"
				"hooktype" "entity"
				"arguments"
				{
					"other"
					{
						"type" "cbaseentity"
					}
				}
			}
			"CTeamplayRules::FPlayerCanTakeDamage"
			{
				"offset" "CTeamplayRules::FPlayerCanTakeDamage"
				"callconv" "thiscall"
				"return" "bool"
				"this" "address"
				"hooktype" "gamerules"
				"arguments"
				{
					"player"
					{
						"type" "cbaseentity"
					}
					"other"
					{
						"type" "cbaseentity"
					}
					"dmg"
					{
						"type" "objectptr"
					}
				}
			}
			"CTeamplayRules::PlayerRelationship"
			{
				"offset" "CTeamplayRules::PlayerRelationship"
				"callconv" "thiscall"
				"return" "int"
				"this" "address"
				"hooktype" "gamerules"
				"arguments"
				{
					"player"
					{
						"type" "cbaseentity"
					}
					"other"
					{
						"type" "cbaseentity"
					}
				}
			}
			"CTeamplayRules::GetTeamID"
			{
				"offset" "CTeamplayRules::GetTeamID"
				"callconv" "thiscall"
				"return" "charptr"
				"this" "address"
				"hooktype" "gamerules"
				"arguments"
				{
					"player"
					{
						"type" "cbaseentity"
					}
				}
			}
			"CBaseEntity::ShouldCollide"
			{
				"offset" "CBaseEntity::ShouldCollide"
				"callconv" "thiscall"
				"return" "bool"
				"this" "entity"
				"hooktype" "entity"
				"arguments"
				{
					"group"
					{
						"type" "int"
					}
					"mask"
					{
						"type" "int"
					}
				}
			}
			"CBaseProjectile::CanCollideWithTeammates"
			{
				"offset" "CBaseProjectile::CanCollideWithTeammates"
				"callconv" "thiscall"
				"return" "bool"
				"this" "entity"
				"hooktype" "entity"
			}
			"CBaseProjectile::GetCollideWithTeammatesDelay"
			{
				"offset" "CBaseProjectile::GetCollideWithTeammatesDelay"
				"callconv" "thiscall"
				"return" "float"
				"this" "entity"
				"hooktype" "entity"
			}
			"JarExplode"
			{
				"signature" "JarExplode"
				"callconv" "cdecl"
				"return" "void"
				"this" "ignore"
				"hooktype" "raw"
				"arguments"
				{
					"iEntIndex"
					{
						"type" "int"
					}
					"pAttacker"
					{
						"type" "cbaseentity"
					}
					"pOriginalWeapon"
					{
						"type" "cbaseentity"
					}
					"pWeapon"
					{
						"type" "cbaseentity"
					}
					"vContactPoint"
					{
						"type" "vectorptr"
					}
					"iTeam"
					{
						"type" "int"
					}
					"flRadius"
					{
						"type" "float"
					}
					"cond"
					{
						"type" "int"
					}
					"flDuration"
					{
						"type" "float"
					}
					"pszImpactEffect"
					{
						"type" "charptr"
					}
				}
			}
			"CTFKnife::CanPerformBackstabAgainstTarget"
			{
				"signature" "CTFKnife::CanPerformBackstabAgainstTarget"
				"callconv" "thiscall"
				"return" "bool"
				"this" "entity"
				"hooktype" "entity"
				"arguments"
				{
					"pTarget"
					{
						"type" "cbaseentity"
					}
				}
			}
			"CTFWeaponBaseMelee::DoSwingTrace"
			{
				"offset" "CTFWeaponBaseMelee::DoSwingTrace"
				"callconv" "thiscall"
				"return" "bool"
				"this" "entity"
				"hooktype" "entity"
				"arguments"
				{
					"pTarget"
					{
						"type" "objectptr"
					}
				}
			}
			"CTFKnife::BackstabVMThink"
			{
				"signature" "CTFKnife::BackstabVMThink"
				"callconv" "thiscall"
				"return" "void"
				"this" "entity"
				"hooktype" "entity"
			}
			"CBaseCombatWeapon::PrimaryAttack"
			{
				"offset" "CBaseCombatWeapon::PrimaryAttack"
				"callconv" "thiscall"
				"return" "void"
				"this" "entity"
				"hooktype" "entity"
			}
			"CTFProjectile_Jar::OnHit"
			{
				"offset" "CTFProjectile_Jar::OnHit"
				"callconv" "thiscall"
				"return" "void"
				"this" "entity"
				"hooktype" "entity"
				"arguments"
				{
					"pOther"
					{
						"type" "cbaseentity"
					}
				}
			}
			"CTFWeaponBase::DeflectPlayer"
			{
				"offset" "CTFWeaponBase::DeflectPlayer"
				"callconv" "thiscall"
				"return" "bool"
				"this" "entity"
				"hooktype" "entity"
				"arguments"
				{
					"pTarget"
					{
						"type" "cbaseentity"
					}
					"pOwner"
					{
						"type" "cbaseentity"
					}
					"vecForward"
					{
						"type" "vectorptr"
					}
					"vecCenter"
					{
						"type" "vectorptr"
					}
					"vecSize"
					{
						"type" "vectorptr"
					}
				}
			}
			"CTFWeaponBase::DeflectEntity"
			{
				"offset" "CTFWeaponBase::DeflectEntity"
				"callconv" "thiscall"
				"return" "bool"
				"this" "entity"
				"hooktype" "entity"
				"arguments"
				{
					"pTarget"
					{
						"type" "cbaseentity"
					}
					"pOwner"
					{
						"type" "cbaseentity"
					}
					"vecForward"
					{
						"type" "vectorptr"
					}
					"vecCenter"
					{
						"type" "vectorptr"
					}
					"vecSize"
					{
						"type" "vectorptr"
					}
				}
			}
			"CBaseObject::Killed"
			{
				"offset" "CBaseObject::Killed"
				"callconv" "thiscall"
				"return" "void"
				"this" "entity"
				"hooktype" "entity"
				"arguments"
				{
					"info"
					{
						"type" "objectptr"
					}
				}
			}
			"CTFGameRules::GetTeamAssignmentOverride"
			{
				"signature" "CTFGameRules::GetTeamAssignmentOverride"
				"callconv" "thiscall"
				"return" "int"
				"this" "address"
				"hooktype" "gamerules"
				"arguments"
				{
					"pTFPlayer"
					{
						"type" "cbaseentity"
					}
					"iDesiredTeam"
					{
						"type" "int"
					}
					"bAutoBalance"
					{
						"type" "bool"
					}
				}
			}
		}
	}
}
